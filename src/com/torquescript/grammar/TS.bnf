//Credit where credit is due:
// Based on
// CMDgram.y from Torque (a couple versions of it)
// https://github.com/JetBrains/Grammar-Kit/blob/master/testData/generator/ExprParser.bnf
// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
{
    parserClass="com.torquescript.parser.TSParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="TS"
    psiImplClassSuffix="Impl"
    psiPackage="com.torquescript.psi"
    psiImplPackage="com.torquescript.psi.impl"

    elementTypeHolderClass="com.torquescript.psi.TSTypes"
    elementTypeClass="com.torquescript.psi.TSElementType"
    tokenTypeClass="com.torquescript.psi.TSTokenType"

    psiImplUtilClass="com.torquescript.psi.impl.TSPsiImplUtil"
    parserUtilClass="com.torquescript.parser.TSParserUtil"

    name(".*expr")='expression'
    extends(".*expr")='expr'
    consumeTokenMethod(".*expr")="consumeTokenFast"
}

tsFile ::= decl *

private decl ::=
    stmt
    |
    fn_decl_stmt
    |
    package_decl

package_decl ::=
    PACKAGE ID BRACE_OPEN fn_decl_stmt* BRACE_CLOSE SEMICOLON
    {mixin="com.torquescript.psi.impl.TSNamedElementImpl" implements="com.torquescript.psi.TSNamedElement"
    methods=[getName getNameIdentifier setName]}

fn_decl_stmt ::=
    FUNCTION fn_name_stmt var_list? PAREN_CLOSE BRACE_OPEN stmt* BRACE_CLOSE
    {mixin="com.torquescript.psi.impl.TSNamedElementImpl" implements="com.torquescript.psi.TSNamedElement, com.intellij.navigation.NavigationItem"
     methods=[getFunctionName getName setName getNameIdentifier getPresentation getNamespace getFunctionType getArgList]}

// Needs the PAREN_OPEN otherwise NS functions will match as global
fn_name_stmt ::=
    ID PAREN_OPEN
    |
    ID COLON_DOUBLE ID PAREN_OPEN
{methods=[getFunctionName getNamespace getFunctionType]}

var_list ::=
    var_group (COMMA var_group)*

private stmt ::=
    if_stmt
    |
    while_stmt
    |
    for_stmt
    |
    foreach_stmt
    |
    datablock_decl
    |
    switch_stmt
    |
    break_stmt
    |
    continue_stmt
    |
    return_stmt
    |
    expression_stmt
    |
    COMMENT

//-----------------------------------------------------------------------------
// Block-type expressions and stuff

if_stmt ::=
//Most specific rule comes first, so that means the else-case
    IF PAREN_OPEN expr PAREN_CLOSE stmt_block ELSE stmt_block
    |
    IF PAREN_OPEN expr PAREN_CLOSE stmt_block

while_stmt ::=
    WHILE PAREN_OPEN expr PAREN_CLOSE stmt_block
    |
    DO stmt_block WHILE PAREN_OPEN expr PAREN_CLOSE

for_stmt ::=
    FOR PAREN_OPEN expr SEMICOLON expr SEMICOLON expr PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN expr SEMICOLON expr SEMICOLON      PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN expr SEMICOLON      SEMICOLON expr PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN expr SEMICOLON      SEMICOLON      PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN      SEMICOLON expr SEMICOLON expr PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN      SEMICOLON expr SEMICOLON      PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN      SEMICOLON      SEMICOLON expr PAREN_CLOSE stmt_block
    |
    FOR PAREN_OPEN      SEMICOLON      SEMICOLON      PAREN_CLOSE stmt_block

foreach_stmt ::=
    FOREACH PAREN_OPEN var_group IN expr PAREN_CLOSE stmt_block
    |
    FOREACHSTR PAREN_OPEN var_group IN expr PAREN_CLOSE stmt_block

datablock_decl ::=
    DATABLOCK ID PAREN_OPEN ID (COLON ID)? PAREN_CLOSE BRACE_OPEN field_list BRACE_CLOSE SEMICOLON
    {extends=object_expr
    methods=[getName getClassName getParentName]}

switch_stmt ::=
    SWITCH PAREN_OPEN expr PAREN_CLOSE BRACE_OPEN case_stmt* default_stmt? BRACE_CLOSE
    |
    SWITCHSTR PAREN_OPEN expr PAREN_CLOSE BRACE_OPEN case_stmt* default_stmt? BRACE_CLOSE

case_stmt ::=
    CASE case_expr COLON stmt*

default_stmt ::=
    DEFAULT COLON stmt*

case_expr ::=
    expr (CASEOR expr)*

break_stmt ::= BREAK SEMICOLON
continue_stmt ::= CONTINUE SEMICOLON
return_stmt ::=
    RETURN SEMICOLON
    |
    RETURN expr SEMICOLON

//Block of statements eg after an if condition
stmt_block ::=
    BRACE_OPEN stmt* BRACE_CLOSE
    |
    stmt

field_list ::=
    field_assign+

field_assign ::=
    ID ASSIGN expr SEMICOLON
    |
    DATABLOCK ASSIGN expr SEMICOLON
    |
    ID BRACKET_OPEN array_index_expr BRACKET_CLOSE ASSIGN expr SEMICOLON

//Statement that is just an expression and a semi
expression_stmt ::=
    expr_stmt_group SEMICOLON

external expr_stmt_group ::= parseExpressionStmtGroup

//-----------------------------------------------------------------------------

//Expressions
expr ::=
    object_group
    |
    ternary_expr
    |
    bitwise_group
    |
    conditional_expr
    |
    add_group
    |
    mul_group
    |
    unary_math_group
    |
    concat_group
    |
    unary_bool_group
    |
    pissy_group

//-----------------------------------------------------------------------------
// Groups

//General expressions
private object_group ::= object_expr
private bitwise_group ::= xor_expr | mod_expr | bit_and_expr | bit_or_expr
private add_group ::= plus_expr | minus_expr
private mul_group ::= mul_expr | div_expr
private unary_math_group ::= negate_expr | abs_expr
private concat_group ::= concat_expr | concat_space_expr | concat_tab_expr | concat_nl_expr
private unary_bool_group ::= not_expr | bit_not_expr

//Object declaration is pretty straightforward
object_expr ::=
    NEW class_name_expr PAREN_OPEN expr? (COLON ID)? (COMMA expr)* PAREN_CLOSE BRACE_OPEN field_assign* (object_expr SEMICOLON)* BRACE_CLOSE
    |
    NEW class_name_expr PAREN_OPEN expr? (COLON ID)? (COMMA expr)* PAREN_CLOSE
    |
    SINGLETON class_name_expr PAREN_OPEN expr? (COLON ID)? (COMMA expr)* PAREN_CLOSE BRACE_OPEN field_assign* (object_expr SEMICOLON)* BRACE_CLOSE
    |
    SINGLETON class_name_expr PAREN_OPEN expr? (COLON ID)? (COMMA expr)* PAREN_CLOSE
    {methods=[getName getClassName getParentName]}

class_name_expr ::=
    ID
    |
    PAREN_OPEN expr PAREN_CLOSE

//-----------------------------------------------------------------------------
// The relatively decent and normal expression section

//Bitwise group
xor_expr ::= expr OP_XOR expr
mod_expr ::= expr OP_MOD expr
bit_and_expr ::= expr OP_BIT_AND expr
bit_or_expr ::= expr OP_BIT_OR expr
//Add group
plus_expr ::= expr OP_ADD expr
minus_expr ::= expr OP_SUB expr
//Mul group
mul_expr ::= expr OP_MUL expr
div_expr ::= expr OP_DIV expr
//Unary math group
negate_expr ::= OP_SUB expr
abs_expr ::= OP_ADD expr
//Conditional group
ternary_expr ::= expr TERNARY expr COLON expr
conditional_expr ::= expr (COND_GT | COND_LT | COND_GE | COND_LE | COND_EQ | COND_NE | COND_OR | LSHIFT | RSHIFT | COND_AND | COND_STREQ | COND_STRNE) expr
//Concat group
concat_expr ::= expr OP_CAT expr
concat_space_expr ::= expr OP_CAT_SPC expr
concat_tab_expr ::= expr OP_CAT_TAB expr
concat_nl_expr ::= expr OP_CAT_NL expr
//Unary bool group
not_expr ::= OP_NOT expr
bit_not_expr ::= OP_BIT_NOT expr

//-----------------------------------------------------------------------------
//Scary stuff beyond here, changing any of this will be a nightmare

//Danger zone

private pissy_group ::=
    assign_var_expr
    | assign_ref_expr
    | assign_ref_index_expr
    | assign_index_expr

    | call_global_expr
    | call_global_ns_expr
    | call_method_expr

    | ref_index_expr
    | ref_expr
    | ref_var_index_expr

    | literal_expr
    | paren_expr


//Assign group, can't shorten this with access_group because it has to be specific
fake assign_expr ::=
assign_var_expr ::= var_group assign_block {rightAssociative=true extends=assign_expr}
assign_index_expr ::= var_group BRACKET_OPEN array_index_expr BRACKET_CLOSE assign_block {rightAssociative=true extends=assign_expr}
assign_ref_expr ::= expr indirection ID assign_block {rightAssociative=true extends=assign_expr}
assign_ref_index_expr ::= expr indirection ID BRACKET_OPEN array_index_expr BRACKET_CLOSE assign_block {rightAssociative=true extends=assign_expr}

private assign_block ::=
    ASSIGN expr
    |
    (ASSIGN_INC | ASSIGN_DEC)
    |
    (ASSIGN_ADD | ASSIGN_SUB | ASSIGN_MUL | ASSIGN_DIV | ASSIGN_MOD | ASSIGN_AND | ASSIGN_XOR | ASSIGN_OR | ASSIGN_LSHIFT | ASSIGN_RSHIFT) expr

//Call group
fake call_expr ::= {methods=[getReference getFunctionName getNameNode getFunctionType isParentCall getParentFunction]}
call_global_expr ::= ID PAREN_OPEN arg_list? PAREN_CLOSE {extends=call_expr}
call_global_ns_expr ::= (ID | PARENT) COLON_DOUBLE ID PAREN_OPEN arg_list? PAREN_CLOSE {extends=call_expr}
call_method_expr ::= expr indirection ID PAREN_OPEN arg_list? PAREN_CLOSE {extends=call_expr}

//Access group
ref_var_index_expr ::= var_group BRACKET_OPEN array_index_expr BRACKET_CLOSE
ref_index_expr ::= expr indirection ID BRACKET_OPEN array_index_expr BRACKET_CLOSE
ref_expr ::= expr indirection ID
//Primary group
literal_expr ::= TAGATOM | STRATOM | FLOAT | INTEGER | var_group | bool_expr | ID {methods=[getName getReference]}
paren_expr ::= PAREN_OPEN expr PAREN_CLOSE

//-----------------------------------------------------------------------------
//Helpers

private indirection ::= DOT | POINT_INTERNAL | POINT_INTERNAL_RECURSIVE
private array_index_expr ::= expr (COMMA expr)*
private arg_list ::= expr (COMMA expr)*
bool_expr ::= TRUE | FALSE

fake var_expr ::= {methods=[getName isLocal getReference]}
private global_var ::= GLOBALVAR {extends=var_expr}
private local_var ::= LOCALVAR {extends=var_expr}

private var_group ::= global_var | local_var